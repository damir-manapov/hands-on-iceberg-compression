services:
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio12345}
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - minio-data:/data
    networks: [lake]

  # one-shot init job: create the 'warehouse' bucket in MinIO
  minio-init:
    image: quay.io/minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/warehouse || true &&
      mc policy set none local/warehouse || true
      "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio12345}
    networks: [lake]
    restart: "no"

  # backing database for Nessie (persistent)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: nessie
      POSTGRES_PASSWORD: nessie
      POSTGRES_DB: nessie
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nessie -d nessie"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks: [lake]

  nessie:
    image: ghcr.io/projectnessie/nessie:0.104.3-java
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Use JDBC version store with Postgres
      NESSIE_VERSION_STORE_TYPE: JDBC
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/nessie
      QUARKUS_DATASOURCE_USERNAME: nessie
      QUARKUS_DATASOURCE_PASSWORD: nessie
      # (optional) tune http/threads via JAVA_OPTS_APPEND if you like
    ports:
      - "19120:19120"   # Nessie API
    healthcheck:
      # Ready when API responds
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v2/config"]
      interval: 5s
      timeout: 3s
      retries: 60
    networks: [lake]

  trino:
    image: trinodb/trino:latest
    depends_on:
      nessie:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    environment:
      # Only for logging/identification
      JAVA_TOOL_OPTIONS: "-Duser.timezone=UTC"
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio12345}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 5s
      timeout: 3s
      retries: 60
    volumes:
      # mount catalog files (we provide content below)
      - ./trino/catalog:/etc/trino/catalog:ro
    networks: [lake]

networks:
  lake: {}

volumes:
  minio-data: {}
  pg-data: {}
